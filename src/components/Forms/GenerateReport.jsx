/* eslint-disable react/prop-types */
import jsPDF from "jspdf";
import "jspdf-autotable";
import { format, toDate } from "date-fns";
import Button from "./Button";
import classNames from "classnames";
import { useFunction } from "../../context/FunctionContext";
export default function GenerateReport({
  title,
  className,
  record,
  tableHeader,
  fileTitle,
  fileName,
  additionalData = [],
  dateCoverage = [],
}) {
  const { capitalize } = useFunction();
  const generateAdditionalData = (doc, margin, height) => {
    if (additionalData && additionalData.length > 0) {
      additionalData.map((adtData) => {
        return doc.autoTable({
          startY: doc.autoTable.previous.finalY + 17,
          styles: { halign: "center" },
          headStyles: { fillColor: [185, 86, 70] },
          margin: { top: 30 },
          head: [adtData.headers],
          body: adtData.record,
          didDrawPage: (data) => {
            margin = data.settings.margin.left;
            doc.setFontSize(11);

            doc.text(adtData.title, 15, doc.autoTable.previous.finalY + 10, {
              align: "left",
              baseline: "top",
            });
            const str = "Page " + doc.internal.getNumberOfPages();
            doc.text(str, margin, height - 10);
          },
        });
      });
    }
  };
  const generate = () => {
    const user = JSON.parse(localStorage.getItem("currentUser"));

    const doc = new jsPDF({ orientation: "portrait", format: "a4" });

    const width =
      doc.internal.pageSize.width || doc.internal.pageSize.getWidth();
    const height =
      doc.internal.pageSize.height || doc.internal.pageSize.getHeight();
    let margin;
    doc.autoTable({
      startY: 37,
      styles: { halign: "center" },
      headStyles: { fillColor: [185, 86, 70] },
      margin: { top: 30 },
      head: [tableHeader],
      body: record,
      didDrawPage: (data) => {
        margin = data.settings.margin.left;

        doc.text("Edwin and Lina Poultry Farm", width / 2, 10, {
          align: "center",
          baseline: "top",
        });

        doc.setFontSize(12);
        doc.text(fileTitle + " Report", width / 2, 20, { align: "center" });

        doc.setFontSize(11);
        doc.text("Date Coverage: ", 15, 25, {
          align: "left",
          baseline: "top",
        });
        doc.text(
          format(new Date(dateCoverage.start_date), "MMMM d, yyyy") +
            " - " +
            format(new Date(dateCoverage.end_date), "MMMM d, yyyy"),
          15 + doc.getTextDimensions("Date Coverage: ").w,
          25,
          {
            align: "left",
            baseline: "top",
          }
        );
        if (fileTitle === "Egg Production" && record) {
          doc.text(
            "Produced Egg Trays: " +
              record.reduce((accumulator, item) => {
                return (
                  parseInt(accumulator) + parseInt(item[1]) + parseInt(item[2])
                );
              }, 0),
            15,
            31,
            { align: "left", baseline: "top" }
          );
        }
        if (additionalData.length === 0) {
          doc.setFontSize(11);

          const str = "Page " + doc.internal.getNumberOfPages();
          doc.text(str, margin, height - 10);
        }
      },
    });

    generateAdditionalData(doc, margin, height, width);
    const lastPage = doc.internal.getNumberOfPages();
    const currentDate = toDate(new Date());
    const date = format(currentDate, "MM/dd/yyyy hh:mm:ss a");
    const dateFormatted = "Printed on " + date;
    const dateWidth = doc.getTextWidth(dateFormatted);

    doc.setPage(lastPage);
    doc.setFontSize(11);

    doc.text("Generated by: ", margin, height - 40, {
      align: "left",
      baseline: "bottom",
    });
    doc.text(
      `${capitalize(user.first_name)} ${capitalize(user.last_name)}`,
      margin,
      height - 25,
      {
        align: "left",
        baseline: "bottom",
      }
    );

    doc.text(dateFormatted, width - dateWidth + margin, height - 10, {
      align: "left",
      baseline: "bottom",
    });
    doc.save(fileName);
  };
  return (
    <>
      <Button
        onClick={() => generate()}
        value={
          <div className="flex items-center gap-1">
            <span>{title}</span>
          </div>
        }
        className={classNames(className)}
      />
    </>
  );
}
